import os
import telebot
from flask import Flask, request
import logging

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û 'app') ---
# Gunicorn –∏—â–µ—Ç —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é!
app = Flask(__name__)

# --- 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –∏ –ö–ª—é—á–µ–π ---
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Render
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
# URL —Å–µ—Ä–≤–∏—Å–∞ Render (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è Render)
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL") 
# –ö–ª—é—á OpenRouter (–¥–ª—è AI-–∑–∞–ø—Ä–æ—Å–æ–≤)
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY") 

if not TELEGRAM_TOKEN or not RENDER_EXTERNAL_URL or not OPENROUTER_API_KEY:
    logging.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã: TELEGRAM_TOKEN, RENDER_EXTERNAL_URL, OPENROUTER_API_KEY.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode='html')
# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
SECRET_ROUTE = '/' + TELEGRAM_TOKEN 

# --- 3. –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —á–µ—Ä–µ–∑ OpenRouter. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    
    # üö® –í–ù–ò–ú–ê–ù–ò–ï: –ó–î–ï–°–¨ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –¢–í–û–ô –ö–û–î –î–õ–Ø OPENROUTER
    
    # –ü–æ–∫–∞ —Ç—ã –Ω–µ –≤—Å—Ç–∞–≤–∏–ª —Å–≤–æ–π –∫–æ–¥ –¥–ª—è OpenRouter, –º—ã –±—É–¥–µ–º –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å —ç—Ö–æ–º
    try:
        # –í–∞—à –∫–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter –±—É–¥–µ—Ç –∑–¥–µ—Å—å
        # response = api_call_to_openrouter(message.text) 
        
        # –ó–∞–≥–ª—É—à–∫–∞:
        response_text = f"ü§ñ –í–∞—à –∑–∞–ø—Ä–æ—Å: {message.text}. (–ù—É–∂–µ–Ω –∫–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenRouter)"
        
        bot.reply_to(message, response_text)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# --- 4. –ú–∞—Ä—à—Ä—É—Ç—ã Flask –¥–ª—è Webhook ---

@app.route("/", methods=["GET"])
def home():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    return "Webhook server is running. Access /setwebhook/ to configure.", 200

@app.route("/setwebhook/", methods=["GET"])
def set_webhook_route():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook'–∞ –≤ Telegram."""
    try:
        webhook_url = RENDER_EXTERNAL_URL + SECRET_ROUTE
        is_set = bot.set_webhook(url=webhook_url)
        
        if is_set:
            logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")
            return f"Webhook successfully set to: {webhook_url}", 200
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook.")
            return "Webhook setup failed.", 500
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
        return f"Error setting webhook: {e}", 500

@app.route(SECRET_ROUTE, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Bad Request', 403

# --- 5. –ó–∞–ø—É—Å–∫ (Gunicorn –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'app') ---
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Gunicorn –Ω–∞ Render, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
