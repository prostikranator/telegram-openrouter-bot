import os
import requests
import json
import threading
import logging
import pandas as pd 
from flask import Flask, request
from telebot import types
import telebot

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ tinkoff-investments ---
from tinkoff.investments import Client, MoneyValue, PortfolioResponse
from tinkoff.investments.exceptions import RequestError 

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TINKOFF_API_TOKEN = os.getenv("TINKOFF_API_TOKEN") 
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "gpt-3.5-turbo")

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY or not TINKOFF_API_TOKEN:
    logger.critical("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.")
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã.")

# --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode='HTML')
app = Flask(__name__)
SECRET_ROUTE = f"/{TELEGRAM_TOKEN}"

# --- 3. –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–°–ò–ù–•–†–û–ù–ù–ê–Ø) ---

def to_rubles(money: MoneyValue) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MoneyValue –≤ float —Ä—É–±–ª–µ–π."""
    return money.units + money.nano / 1_000_000_000

def get_tinkoff_portfolio() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Client
        with Client(TINKOFF_API_TOKEN) as client: 
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è)
            accounts = client.users.get_accounts().accounts
            if not accounts:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ."
            account_id = accounts[0].id
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
            portfolio: PortfolioResponse = client.operations.get_portfolio(account_id=account_id)
            
            # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            data = []
            total_value = to_rubles(portfolio.total_amount_portfolio)
            
            for p in portfolio.positions:
                # –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è –ø–∞–∫–µ—Ç–∞ tinkoff-investments –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å p.name, 
                # –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º p.ticker. –ü–æ–ª–µ '–ù–∞–∑–≤–∞–Ω–∏–µ' –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω–æ.
                
                expected_yield_value = to_rubles(p.expected_yield) if p.expected_yield else 0
                current_price = to_rubles(p.current_price)
                
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.
                if p.quantity is None or p.quantity.units == 0:
                    continue 

                total_position_value = current_price * p.quantity.units
                
                data.append({
                    '–¢–∏–∫–µ—Ä': p.ticker,
                    '–¢–∏–ø': p.instrument_type,
                    '–ö–æ–ª-–≤–æ': p.quantity.units,
                    '–¶–µ–Ω–∞ (RUB)': f"{current_price:.2f}",
                    '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)': f"{expected_yield_value / total_position_value * 100:.2f}" if total_position_value else "0.00"
                })

            df = pd.DataFrame(data)
            header = f"<b>üí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} RUB</b>\n\n"
            
            if not df.empty:
                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º to_markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ Telegram
                 table_text = df.to_markdown(index=False, numalign="left", stralign="left")
                 return header + f"<pre>{table_text}</pre>"
            else:
                 return header + "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."

    except RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ (RequestError): {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–æ–≤."
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}"

# --- 4. –§–£–ù–ö–¶–ò–Ø OPENROUTER (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

def get_openrouter_response(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter."""
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –≤–µ–∂–ª–∏–≤—ã–π Telegram-–±–æ—Ç."},
            {"role": "user", "content": prompt},
        ],
    }
    try:
        response = requests.post(url, headers=headers, json=data, timeout=60)
        response.raise_for_status()
        answer = response.json()["choices"][0]["message"]["content"]
        return answer.strip()
    except requests.exceptions.HTTPError as e:
        status = e.response.status_code if e.response is not None else "?"
        logger.error(f"HTTP Error from OpenRouter: {status} {e.response.text if e.response is not None else ''}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouter (–ö–æ–¥ {status})."
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter: {e}"

# --- 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

@bot.message_handler(commands=['start', 'help'])
def cmd_start(message: types.Message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç-–∞–≥–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /portfolio –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–≤–æ–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.")

@bot.message_handler(commands=['portfolio'])
def cmd_portfolio(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞: –ó–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /portfolio –æ—Ç {message.chat.id}")
    bot.send_chat_action(message.chat.id, 'typing')
    
    # –í—ã–∑—ã–≤–∞–µ–º –°–ò–ù–•–†–û–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é
    report = get_tinkoff_portfolio()
    
    bot.reply_to(message, report)

@bot.message_handler(func=lambda message: True)
def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenRouter. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenRouter –æ—Ç {message.chat.id}")
    bot.send_chat_action(message.chat.id, 'typing')
    
    user_text = message.text
    reply = get_openrouter_response(user_text)
    
    bot.reply_to(message, reply)


# --- 6. –ú–ê–†–®–†–£–¢–´ WEBHook (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.", 200

@app.route("/setwebhook/")
def set_webhook():
    hostname = os.getenv('RENDER_EXTERNAL_HOSTNAME') 
    if not hostname:
        return "‚ùå RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω.", 500
    webhook_url = f"https://{hostname}{SECRET_ROUTE}"
    try:
        result = bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook set result: {result}. URL: {webhook_url}")
        return {"webhook_url": webhook_url, "result": result}, 200
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook")
        return {"error": str(e), "webhook_url": webhook_url}, 500

@app.route(SECRET_ROUTE, methods=["POST"])
def telegram_webhook():
    """–ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    if request.headers.get("content-type") != "application/json":
        return "Bad Request", 400
    try:
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–í–°–ï–ì–î–ê –î–ï–õ–ê–ï–ú –≠–¢–û!)
        threading.Thread(target=bot.process_new_updates, args=([update],), daemon=True).start()
        return "OK", 200
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook")
        return "Error", 500

# --- 7. –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
