import os
import requests
import json
import logging
import pandas as pd 
from flask import Flask, request
from telebot import types
import telebot

from tinkoff.invest import Client, MoneyValue, PortfolioResponse
from tinkoff.invest.exceptions import RequestError 

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TINKOFF_API_TOKEN = os.getenv("TINKOFF_API_TOKEN") 
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "gpt-3.5-turbo")

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY or not TINKOFF_API_TOKEN:
    logger.critical("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.")
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã.")

# --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode='HTML')
app = Flask(__name__)
SECRET_ROUTE = f"/{TELEGRAM_TOKEN}"

# --- 3. –§–£–ù–ö–¶–ò–ò ---

def to_rubles(money: MoneyValue) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MoneyValue –≤ float —Ä—É–±–ª–µ–π."""
    return money.units + money.nano / 1_000_000_000

def get_tinkoff_portfolio() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É."""
    try:
        with Client(TINKOFF_API_TOKEN) as client: 
            accounts = client.users.get_accounts().accounts
            if not accounts:
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤."
            account_id = accounts[0].id
            
            portfolio: PortfolioResponse = client.operations.get_portfolio(account_id=account_id)
            data = []
            total_value = to_rubles(portfolio.total_amount_portfolio)
            
            for p in portfolio.positions:
                expected_yield_value = to_rubles(p.expected_yield) if p.expected_yield else 0
                current_price = to_rubles(p.current_price)
                if p.quantity is None or p.quantity.units == 0:
                    continue
                total_position_value = current_price * p.quantity.units
                data.append({
                    '–¢–∏–∫–µ—Ä/FIGI': p.figi,
                    '–¢–∏–ø': p.instrument_type,
                    '–ö–æ–ª-–≤–æ': p.quantity.units,
                    '–¶–µ–Ω–∞ (RUB)': f"{current_price:.2f}",
                    '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)': f"{expected_yield_value / total_position_value * 100:.2f}" if total_position_value else "0.00"
                })

            df = pd.DataFrame(data)
            header = f"<b>üí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} RUB</b>\n\n"
            
            if not df.empty:
                 table_text = df.to_markdown(index=False, numalign="left", stralign="left")
                 return header + f"<pre>{table_text}</pre>"
            else:
                 return header + "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."

    except RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API –¢–∏–Ω—å–∫–æ—Ñ—Ñ."
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

def get_openrouter_response(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter."""
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –≤–µ–∂–ª–∏–≤—ã–π Telegram-–±–æ—Ç."},
            {"role": "user", "content": prompt},
        ],
    }
    try:
        response = requests.post(url, headers=headers, json=data, timeout=60)
        response.raise_for_status()
        answer = response.json()["choices"][0]["message"]["content"]
        return answer.strip()
    except requests.exceptions.HTTPError as e:
        status = e.response.status_code if e.response else "?"
        logger.error(f"HTTP Error from OpenRouter: {status}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouter (–ö–æ–¥ {status})."
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter: {e}"

# --- 4. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---

@bot.message_handler(commands=['start', 'help'])
def cmd_start(message: types.Message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç-–∞–≥–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /portfolio –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–≤–æ–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.")

@bot.message_handler(commands=['portfolio'])
def cmd_portfolio(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /portfolio –æ—Ç {message.chat.id}")
    bot.send_chat_action(message.chat.id, 'typing')
    report = get_tinkoff_portfolio()
    bot.reply_to(message, report)

@bot.message_handler(func=lambda message: True)
def handle_message(message: types.Message):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenRouter –æ—Ç {message.chat.id}")
    bot.send_chat_action(message.chat.id, 'typing')
    reply = get_openrouter_response(message.text)
    bot.reply_to(message, reply)

# --- 5. –ú–∞—Ä—à—Ä—É—Ç—ã Flask ---

@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.", 200

@app.route("/setwebhook/")
def set_webhook():
    hostname = os.getenv('RENDER_EXTERNAL_HOSTNAME') 
    if not hostname:
        return "‚ùå RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω.", 500
    webhook_url = f"https://{hostname}{SECRET_ROUTE}"
    try:
        result = bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result}, URL: {webhook_url}")
        return {"webhook_url": webhook_url, "result": result}, 200
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook")
        return {"error": str(e), "webhook_url": webhook_url}, 500

@app.route(SECRET_ROUTE, methods=["POST"])
def telegram_webhook():
    """–ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram Webhook"""
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "", 200

# --- 6. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
